{
    "docs": [
        {
            "location": "/", 
            "text": "PostMaster Documentation\n\n\nOverview\n\n\nPostMaster is a beautiful web application to manage domains, users, and aliases on a Linux mail server.\nAfter setting up a Linux mail server using the guide from \nDigitalOcean\n or \nLinode\n,\nyou start to see how tedious it can be to write raw SQL queries to add a new user to your Linux mail server.\nPostMaster abstracts the domain, user, and alias management of your mail server into a responsive web interface, that is both simple to use and secure.\n\n\nAlthough PostMaster was built to work with the database schema instructed in the \nDigitalOcean\n or \nLinode\n guides,\npaid support is available for the developers of PostMaster to customize it to work in your environment.\n\n\nPostMaster is written by Kevin Law and Matthew Prahl.\n\n\nFeatures\n\n\n\n\nAdd, remove, edit, or search domains, users, and aliases on a Linux mail server database\n\n\nResponsive web interface that works great on phones, tablets, and PCs\n\n\nConfigurable auditing to keep track of changes\n\n\nActive Directory LDAP login support\n\n\nFriendly REST APIs to automate tasks\n\n\nRuns on Linux, Docker, and Windows\n\n\n\n\nScreenshots\n\n\nDashboard:\n\n\n\n\nDomains:\n\n\n\n\nUsers:\n\n\n\n\nAliases:\n\n\n\n\nConfigurations:\n\n\n\n\nSearch:\n\n\n\n\nMobile:", 
            "title": "Home"
        }, 
        {
            "location": "/#postmaster-documentation", 
            "text": "", 
            "title": "PostMaster Documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "PostMaster is a beautiful web application to manage domains, users, and aliases on a Linux mail server.\nAfter setting up a Linux mail server using the guide from  DigitalOcean  or  Linode ,\nyou start to see how tedious it can be to write raw SQL queries to add a new user to your Linux mail server.\nPostMaster abstracts the domain, user, and alias management of your mail server into a responsive web interface, that is both simple to use and secure.  Although PostMaster was built to work with the database schema instructed in the  DigitalOcean  or  Linode  guides,\npaid support is available for the developers of PostMaster to customize it to work in your environment.  PostMaster is written by Kevin Law and Matthew Prahl.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Add, remove, edit, or search domains, users, and aliases on a Linux mail server database  Responsive web interface that works great on phones, tablets, and PCs  Configurable auditing to keep track of changes  Active Directory LDAP login support  Friendly REST APIs to automate tasks  Runs on Linux, Docker, and Windows", 
            "title": "Features"
        }, 
        {
            "location": "/#screenshots", 
            "text": "", 
            "title": "Screenshots"
        }, 
        {
            "location": "/#dashboard", 
            "text": "", 
            "title": "Dashboard:"
        }, 
        {
            "location": "/#domains", 
            "text": "", 
            "title": "Domains:"
        }, 
        {
            "location": "/#users", 
            "text": "", 
            "title": "Users:"
        }, 
        {
            "location": "/#aliases", 
            "text": "", 
            "title": "Aliases:"
        }, 
        {
            "location": "/#configurations", 
            "text": "", 
            "title": "Configurations:"
        }, 
        {
            "location": "/#search", 
            "text": "", 
            "title": "Search:"
        }, 
        {
            "location": "/#mobile", 
            "text": "", 
            "title": "Mobile:"
        }, 
        {
            "location": "/API/API Overview/", 
            "text": "API Documentation\n\n\nAPI Spec:\n \nOpenAPI (Swagger)\n\n\nAPI Spec File:\n \nOpenAPI (Swagger)\n\n\nCurl Example\n\n\nFor local PostMaster authentication, use the following command (session.txt is used to store your login session):  \n\n\ncurl https://postmaster.example.local/login --data 'username=admin\npassword=PostMaster\nauth_source=PostMaster User' -c session.txt\n\n\n\n\nFor LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session.txt is used to store your login session):\n\n\ncurl https://postmaster.example.local/login --data 'username=user@example.local\npassword=password\nauth_source=example.local' -c session.txt\n\n\n\n\nOnce you are logged in, you can use the following command to query the API:\n\n\ncurl https://postmaster.example.local/api/v1/domains -b session.txt\n\n\n\n\nPowerShell Example (v3+)\n\n\nFor local PostMaster authentication, use the following command (session is a variable used to store your login session):  \n\n\nInvoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'PostMaster'; auth_source = 'PostMaster User'}\n\n\n\n\nFor LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session is a variable used to store your login session):\n\n\nInvoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'password'; auth_source = 'example.local'}\n\n\n\n\nOnce you are logged in, you can use the following command to query the API:\n\n\nInvoke-RestMethod -Uri 'http://postmaster.example.local/api/v1/domains' -WebSession $session", 
            "title": "API Overview"
        }, 
        {
            "location": "/API/API Overview/#api-documentation", 
            "text": "API Spec:   OpenAPI (Swagger)  API Spec File:   OpenAPI (Swagger)", 
            "title": "API Documentation"
        }, 
        {
            "location": "/API/API Overview/#curl-example", 
            "text": "For local PostMaster authentication, use the following command (session.txt is used to store your login session):    curl https://postmaster.example.local/login --data 'username=admin password=PostMaster auth_source=PostMaster User' -c session.txt  For LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session.txt is used to store your login session):  curl https://postmaster.example.local/login --data 'username=user@example.local password=password auth_source=example.local' -c session.txt  Once you are logged in, you can use the following command to query the API:  curl https://postmaster.example.local/api/v1/domains -b session.txt", 
            "title": "Curl Example"
        }, 
        {
            "location": "/API/API Overview/#powershell-example-v3", 
            "text": "For local PostMaster authentication, use the following command (session is a variable used to store your login session):    Invoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'PostMaster'; auth_source = 'PostMaster User'}  For LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session is a variable used to store your login session):  Invoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'password'; auth_source = 'example.local'}  Once you are logged in, you can use the following command to query the API:  Invoke-RestMethod -Uri 'http://postmaster.example.local/api/v1/domains' -WebSession $session", 
            "title": "PowerShell Example (v3+)"
        }, 
        {
            "location": "/Configuration/Command Line Configuration/", 
            "text": "Before You Start\n\n\n\n\n\n\nLogged into the server hosting PostMaster as root or as an administrator, enter the Python virtual environment (if necessary, replace the path with your install location):\n\n\nLinux:\nsource /opt/postmaster/env/bin/activate\nWindows:\nC:\\PostMaster\\env\\Scripts\\activate.ps1\n\n\n\n\n\n\n\nOnce you've entered the Python virtual environment, navigate to the location of manage.py (replace /opt/postmaster/env with your install location):\n\n\ncd /opt/postmaster/git\n\n\n\n\n\n\n\nYou can now run command line configurations with the following:\n\n\npython manage.py [command]\n\n\n\n\n\n\n\nCommand Line Commands\n\n\nsetdburi\n sets the MySQL database URI that PostMaster uses to connect to the MySQL server used by your mail server.\n\n\ncreatedb\n runs a database migration, and configures the default configuration settings if they are missing on the database specified using the \"setdburi\" command.\nThis is used during the installation of PostMaster.\n\n\ngeneratekey\n replaces the secret key in configs.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\nAfter the initial installation, this command should not be run again as all current logins would become invalid upon the next restart of the PostMaster.\n\n\nrunserver -d -h 0.0.0.0\n runs PostMaster in debug mode on port 5000. This is useful if you are having issues as it bypasses the webserver\nand displays failing errors in HTML.\n\n\ndb [command] --directory 'db/migrations'\n runs advanced database migration commands using the db/migrations directory.\nFor more information, visit the \nAlembic API documentation\n.", 
            "title": "Command Line Configuration"
        }, 
        {
            "location": "/Configuration/Command Line Configuration/#before-you-start", 
            "text": "Logged into the server hosting PostMaster as root or as an administrator, enter the Python virtual environment (if necessary, replace the path with your install location):  Linux:\nsource /opt/postmaster/env/bin/activate\nWindows:\nC:\\PostMaster\\env\\Scripts\\activate.ps1    Once you've entered the Python virtual environment, navigate to the location of manage.py (replace /opt/postmaster/env with your install location):  cd /opt/postmaster/git    You can now run command line configurations with the following:  python manage.py [command]", 
            "title": "Before You Start"
        }, 
        {
            "location": "/Configuration/Command Line Configuration/#command-line-commands", 
            "text": "setdburi  sets the MySQL database URI that PostMaster uses to connect to the MySQL server used by your mail server.  createdb  runs a database migration, and configures the default configuration settings if they are missing on the database specified using the \"setdburi\" command.\nThis is used during the installation of PostMaster.  generatekey  replaces the secret key in configs.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\nAfter the initial installation, this command should not be run again as all current logins would become invalid upon the next restart of the PostMaster.  runserver -d -h 0.0.0.0  runs PostMaster in debug mode on port 5000. This is useful if you are having issues as it bypasses the webserver\nand displays failing errors in HTML.  db [command] --directory 'db/migrations'  runs advanced database migration commands using the db/migrations directory.\nFor more information, visit the  Alembic API documentation .", 
            "title": "Command Line Commands"
        }, 
        {
            "location": "/Configuration/Configurations Page/", 
            "text": "Minimum Password Length\n specifies the minimum password length that all mail users and administrators must adhere to.\n\n\nLogin Auditing\n determines whether login and logout events are recorded in the log file. In order to enable this, the \"Log File\" setting must be configured.\n\n\nMail Database Auditing\n determines whether changes to domains, users, aliases, administrators, and configuration settings should be recorded in the log file.\nIn order to enable this, the \"Log File\" setting must be configured.\n\n\nLog File\n specifies a file path to where the log file should be. The path can be relative or absolute, but the file location must be writable by the web server.\nWhen configuring this setting, \"Mail Database Auditing\" will be turned on automatically.\n\n\nEnable LDAP Authentication\n determines whether Active Directory LDAP authentication is turned on or off. In order to enable LDAP authentication,\nthe \"AD Server LDAP String\", \"AD Domain\", and \"AD PostMaster Group\" must be configured.\n\n\nAD Server LDAP String\n specifies the LDAP string used to connect to Active Directory. For instance, if you are using LDAPS and you have a Domain called postmaster.local,\nyou can specify \"LDAPS://postmaster.local:636\", since postmaster.local should be a round robin to all of your Domain Controllers. You can also chose to target a specific Domain Controller\nsuch as \"LDAPS://dc1.postmaster.local:636\". Although not recommended, you can also use LDAP without SSL by specifying something like \"LDAP://postmaster.local\".\n\n\nAD Domain\n specifies the fully qualified domain name of your Active Directory Domain (i.e. postmaster.local).\n\n\nAD PostMaster Group\n specifies the Active Directory group name that Active Directory users must be a member of in order to be an administrator of PostMaster.\nThis setting's value must be the same as the \"Group name (pre-Windows 2000)\" value of the desired group as shown in the screenshot below.", 
            "title": "Configurations Page"
        }, 
        {
            "location": "/Installation/Docker/", 
            "text": "Overview\n\n\nPostMaster is a Docker friendly application, however, it does require a data volume.\nThis is because PostMaster uses database migrations to safely upgrade the database schema.\nThe data volume contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.\nIn this documentation, the data volume will be hosted in /opt/postmaster_data on the Docker host, but you can alter this in anyway you see fit.\n\n\nPrerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nA working Docker host\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nMake sure to replace 'docker.postmaster.local' with your Docker host's IP address or DNS:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'docker.postmaster.local' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nSwitch to the Docker host, and login as root:\n\n\nsudo su -\n\n\n\n\n\n\n\nAs root, create the following folder on the Docker host to hold PostMaster's data volume:\n\n\nmkdir /opt/postmaster_data\n\n\n\n\n\n\n\nProvide the appropriate permissions to PostMaster's data volume:\n\n\nchown root:root /opt/postmaster_data \n chmod 770 /opt/postmaster_data\n\n\n\n\n\n\n\nDownload the PostMaster sourcecode from GitHub:\n\n\ngit clone https://github.com/StackFocus/PostMaster.git ~/postmaster\n\n\n\n\n\n\n\nBuild the Docker image:\n\n\ncd ~/postmaster\ndocker build -t postmaster .\n\n\n\n\n\n\n\nRun a PostMaster Docker container from the created image.\nThe -v points to the data volume that was created in step 2.\nThe -p has the Docker host serve port 80 of the PostMaster container. Change this to what suits your environment.\nThe -e specifies the value of the DB_URI environment variable, which is the URI that PostMaster will use to connect to your mail server's MySQL server.\nMake sure to replace 'password_changeme' and 'docker.postmaster.local' with what you configured in step 2 of MySQL Preparation:\n\n\ndocker run -p 0.0.0.0:80:80 -v /opt/postmaster_data:/opt/postmaster/git/db \\\n     -e DB_URI=mysql://postmasteruser:password_changeme@docker.postmaster.local:3306/servermail -d postmaster\n\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.", 
            "title": "Docker"
        }, 
        {
            "location": "/Installation/Docker/#overview", 
            "text": "PostMaster is a Docker friendly application, however, it does require a data volume.\nThis is because PostMaster uses database migrations to safely upgrade the database schema.\nThe data volume contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.\nIn this documentation, the data volume will be hosted in /opt/postmaster_data on the Docker host, but you can alter this in anyway you see fit.", 
            "title": "Overview"
        }, 
        {
            "location": "/Installation/Docker/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  A working Docker host", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/Docker/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nMake sure to replace 'docker.postmaster.local' with your Docker host's IP address or DNS:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'docker.postmaster.local' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/Docker/#installation", 
            "text": "Switch to the Docker host, and login as root:  sudo su -    As root, create the following folder on the Docker host to hold PostMaster's data volume:  mkdir /opt/postmaster_data    Provide the appropriate permissions to PostMaster's data volume:  chown root:root /opt/postmaster_data   chmod 770 /opt/postmaster_data    Download the PostMaster sourcecode from GitHub:  git clone https://github.com/StackFocus/PostMaster.git ~/postmaster    Build the Docker image:  cd ~/postmaster\ndocker build -t postmaster .    Run a PostMaster Docker container from the created image.\nThe -v points to the data volume that was created in step 2.\nThe -p has the Docker host serve port 80 of the PostMaster container. Change this to what suits your environment.\nThe -e specifies the value of the DB_URI environment variable, which is the URI that PostMaster will use to connect to your mail server's MySQL server.\nMake sure to replace 'password_changeme' and 'docker.postmaster.local' with what you configured in step 2 of MySQL Preparation:  docker run -p 0.0.0.0:80:80 -v /opt/postmaster_data:/opt/postmaster/git/db \\\n     -e DB_URI=mysql://postmasteruser:password_changeme@docker.postmaster.local:3306/servermail -d postmaster    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.", 
            "title": "Installation"
        }, 
        {
            "location": "/Installation/Ubuntu 14.04/", 
            "text": "Prerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nIf you are installing PostMaster on a separate server, you'll need a clean Ubuntu 14.04 installation.\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nSwitch to the server that will host PostMaster if applicable, and login as root:\n\n\nsudo su -\n\n\n\n\n\n\n\nUpdate the apititude package list:\n\n\napt-get update\n\n\n\n\n\n\n\nInstall the required packages for PostMaster:\n\n\napt-get install git python python-pip python-dev libldap2-dev libssl-dev libsasl2-dev libffi-dev apache2 libapache2-mod-wsgi mysql-server libmysqlclient-dev\n\n\n\n\n\n\n\nMake sure you are running Python 2.7 as your default Python installation, as PostMaster relies on Python 2.7:\n\n\npython -V\n\n\n\n\n\n\n\nCreate the required directories for PostMaster:\n\n\nmkdir /opt/postmaster\nmkdir /opt/postmaster/logs\nmkdir /opt/postmaster/git\n\n\n\n\n\n\n\nDownload the PostMaster sourcecode from GitHub:\n\n\ngit clone https://github.com/StackFocus/PostMaster.git /opt/postmaster/git\n\n\n\n\n\n\n\nProvide the proper permissions on the PostMaster files:\n\n\nchown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster\nchmod 770 /opt/postmaster/logs\n\n\n\n\n\n\n\nA python virtual environment is now required.\nThis allows you to separate the system installed python packages from PostMaster's required python packages:\n\n\npip install virtualenv\nvirtualenv /opt/postmaster/env\n\n\n\n\n\n\n\nStart using new python virtual environment\n\n\nsource /opt/postmaster/env/bin/activate\n\n\n\n\n\n\n\nInstall the Python packages required by PostMaster into the python virtual environment:\n\n\ncd /opt/postmaster/git\npip install -r requirements.txt\n\n\n\n\n\n\n\nPostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:\n\n\ncd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'\n\n\n\n\n\n\n\nPostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:\n\n\npython manage.py createdb\n\n\n\n\n\n\n\nPostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:\n\n\npython manage.py generatekey\n\n\n\n\n\n\n\nYou may now exit from the python virtual environment:\n\n\ndeactivate\n\n\n\n\n\n\n\nDisable the default Apache site:\n\n\na2dissite 000-default.conf\n\n\n\n\n\n\n\nCopy the default PostMaster Apache site configuration and give it the appropriate permissions.\nIt is highly recommended that you implement SSL before using PostMaster in production:\n\n\ncp /opt/postmaster/git/ops/apache.conf /etc/apache2/sites-available/postmaster.conf\nchmod 644 /etc/apache2/sites-available/postmaster.conf\nchown root:root /etc/apache2/sites-available/postmaster.conf\n\n\n\n\n\n\n\nEnable the PostMaster Apache site:\n\n\na2ensite postmaster.conf\n\n\n\n\n\n\n\nRestart Apache for the changes to take effect:\n\n\nservice apache2 restart\n\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.\n\n\n\n\n\n\nPlease keep in mind that the /opt/postmaster/git/db/migrations folder should be backed up after installation/updates.\nThis is because PostMaster uses database migrations to safely upgrade the database schema,\nand this folder contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.", 
            "title": "Ubuntu 14.04"
        }, 
        {
            "location": "/Installation/Ubuntu 14.04/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  If you are installing PostMaster on a separate server, you'll need a clean Ubuntu 14.04 installation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/Ubuntu 14.04/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/Ubuntu 14.04/#installation", 
            "text": "Switch to the server that will host PostMaster if applicable, and login as root:  sudo su -    Update the apititude package list:  apt-get update    Install the required packages for PostMaster:  apt-get install git python python-pip python-dev libldap2-dev libssl-dev libsasl2-dev libffi-dev apache2 libapache2-mod-wsgi mysql-server libmysqlclient-dev    Make sure you are running Python 2.7 as your default Python installation, as PostMaster relies on Python 2.7:  python -V    Create the required directories for PostMaster:  mkdir /opt/postmaster\nmkdir /opt/postmaster/logs\nmkdir /opt/postmaster/git    Download the PostMaster sourcecode from GitHub:  git clone https://github.com/StackFocus/PostMaster.git /opt/postmaster/git    Provide the proper permissions on the PostMaster files:  chown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster\nchmod 770 /opt/postmaster/logs    A python virtual environment is now required.\nThis allows you to separate the system installed python packages from PostMaster's required python packages:  pip install virtualenv\nvirtualenv /opt/postmaster/env    Start using new python virtual environment  source /opt/postmaster/env/bin/activate    Install the Python packages required by PostMaster into the python virtual environment:  cd /opt/postmaster/git\npip install -r requirements.txt    PostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:  cd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'    PostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:  python manage.py createdb    PostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:  python manage.py generatekey    You may now exit from the python virtual environment:  deactivate    Disable the default Apache site:  a2dissite 000-default.conf    Copy the default PostMaster Apache site configuration and give it the appropriate permissions.\nIt is highly recommended that you implement SSL before using PostMaster in production:  cp /opt/postmaster/git/ops/apache.conf /etc/apache2/sites-available/postmaster.conf\nchmod 644 /etc/apache2/sites-available/postmaster.conf\nchown root:root /etc/apache2/sites-available/postmaster.conf    Enable the PostMaster Apache site:  a2ensite postmaster.conf    Restart Apache for the changes to take effect:  service apache2 restart    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.    Please keep in mind that the /opt/postmaster/git/db/migrations folder should be backed up after installation/updates.\nThis is because PostMaster uses database migrations to safely upgrade the database schema,\nand this folder contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.", 
            "title": "Installation"
        }, 
        {
            "location": "/Installation/Windows Server 2012 R2/", 
            "text": "Prerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nA clean Windows Server 2012 R2 installation with Administrative access\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nTo install IIS and FastCGI, open an Administrative PowerShell window and run the following commands:\n\n\nImport-Module ServerManager\nInstall-WindowsFeature Web-Server, Web-CGI, Web-Mgmt-Console\n\n\n\n\n\n\n\nTo install Python and WFastCGI, Microsoft Web Platform Installer is required. To download it, run the following command:\n\n\nInvoke-WebRequest -Uri 'http://download.microsoft.com/download/C/F/F/CFF3A0B8-99D4-41A2-AE1A-496C08BEB904/WebPlatformInstaller_amd64_en-US.msi' -OutFile \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\"\n\n\n\n\n\n\n\nInstall Microsoft Web Platform Installer:\n\n\nStart-Process -FilePath 'msiexec.exe' -ArgumentList \"/i $env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi /quiet\" -Wait\n\n\n\n\n\n\n\nUsing Microsoft Web Platform Installer, install Python 2.7 and WFastCGI:\n\n\nInvoke-Expression \"\n '$env:ProgramFiles\\Microsoft\\Web Platform Installer\\WebpiCmd.exe' /Install /Products:WFastCgi_21_279 /AcceptEula\"\n\n\n\n\n\n\n\nDelete the Microsoft Web Platform Installer installation file:\n\n\nRemove-Item \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\" -Force\n\n\n\n\n\n\n\nIn order to download the source code for PostMaster, a git client is required. To download git, run the following command:\n\n\nInvoke-WebRequest -Uri 'https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe' -OutFile \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\"\n\n\n\n\n\n\n\nInstall git:\n\n\nStart-Process -FilePath \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\" -ArgumentList '/VERYSILENT' -Wait\n\n\n\n\n\n\n\nDelete the git installation file:\n\n\nRemove-Item \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\" -Force\n\n\n\n\n\n\n\nCreate a directory to contain PostMaster:\n\n\nNew-Item \"$env:SystemDrive\\PostMaster\" -Type Directory\n\n\n\n\n\n\n\nCreate a directory to contain PostMaster logs:\n\n\nNew-Item \"$env:SystemDrive\\PostMaster\\logs\" -Type Directory\n\n\n\n\n\n\n\nDownload the PostMaster source code:\n\n\n \"$env:ProgramFiles\\Git\\bin\\git.exe\" clone 'https://github.com/StackFocus/PostMaster.git' \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nPostMaster will write logs to C:\\PostMaster\\logs\\postmaster.log, but since IIS does not have access to create that file, it must be done manually with the following command:\n\n\nNew-Item \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\" -Type File\n\n\n\n\n\n\n\nIn order for PostMaster's files to be secured, the proper permissions must be set. The following command will grant only IIS read access,\nand Administrators full control on PostMaster's files:\n\n\ncmd.exe /C \"icacls $env:SystemDrive\\PostMaster /inheritance:r /grant BUILTIN\\IIS_IUSRS:(OI)(CI)(RX) /grant BUILTIN\\Administrators:(OI)(CI)F /grant SYSTEM:(OI)(CI)(F)\"\n\n\n\n\n\n\n\nIn order for PhoenixPass to be able to write to the log file created earlier, IIS requires write access. To do so, use the following command:\n\n\ncmd.exe /C \"icacls $env:SystemDrive\\PostMaster\\logs\\postmaster.log /grant BUILTIN\\IIS_IUSRS:(M)\"\n\n\n\n\n\n\n\nA python virtual environment is now required. This allows you to separate the system installed python packages from PostMaster's required python packages.\nThis is done with the following command:\n\n\n \"$env:SystemDrive\\Python27\\Scripts\\pip.exe\" install virtualenv\n\n\n\n\n\n\n\nCreate a Python virtualenv for PostMaster:\n\n\n \"$env:SystemDrive\\Python27\\Scripts\\virtualenv.exe\" -p \"$env:SystemDrive\\Python27\\python.exe\" \"$env:SystemDrive\\PostMaster\\env\"\n\n\n\n\n\n\n\nTo use the newly created virtual environment in your PowerShell window, run the following command:\n\n\n \"$env:SystemDrive\\PostMaster\\env\\Scripts\\activate.ps1\"\n\n\n\n\n\n\n\nPostMaster requires the Python module \"python-ldap\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:\n\n\nInvoke-WebRequest -Uri 'https://pypi.python.org/packages/2.7/p/python-ldap/python_ldap-2.4.25-cp27-none-win32.whl#md5=aef7058690dd740d9333af35c270d03a' -OutFile \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nInstall \"python-ldap\":\n\n\npip install \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nRemove the \"python-ldap\" installation file:\n\n\nRemove-Item \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\" -Force\n\n\n\n\n\n\n\nPostMaster requires the Python module \"mysqlclient\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:\n\n\nInvoke-WebRequest -Uri 'https://pypi.python.org/packages/cp27/m/mysqlclient/mysqlclient-1.3.7-cp27-none-win32.whl#md5=e9e726fd6f1912af78e2bf6ab56c02f3' -OutFile \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nInstall \"mysqlclient\":\n\n\npip install \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nRemove the \"mysqlclient\" installation file:\n\n\nRemove-Item \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\" -Force\n\n\n\n\n\n\n\nInstall the Python packages that PostMaster requires:\n\n\npip install -r \"$env:SystemDrive\\PostMaster\\git\\requirements.txt\"\n\n\n\n\n\n\n\nCopy wfastcgi.py, created by Microsoft Web Platform Installer earlier, to C:\\PostMaster\\git:\n\n\nCopy-Item -Path \"$env:SystemDrive\\Python27\\Scripts\\wfastcgi.py\" \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nAt this point, PostMaster requires an IIS site. You can either use the \"Default Web Site\" and change the virtual directory to C:\\PostMaster\\git,\nor create a new site that points to that directory. This tutorial will use the Default Web Site. To change the virtual directory, use the following commands:\n\n\nImport-Module WebAdministration\nSet-ItemProperty 'IIS:\\Sites\\Default Web Site\\' -Name physicalPath -Value \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nNow, IIS needs to know how to run PostMaster. The following commands configure FastCGI to be able to use the Python virtual environment created earlier and run PostMaster\n(If you are using a site other than \"Default Web Site\", change that value in the commands below):\n\n\nImport-Module WebAdministration\nSet-WebConfiguration -Filter '/system.webServer/handlers/@AccessPolicy' -Value 'Read, Script' -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/handlers' -Value @{name='PythonHandler'; path='*'; verb='*'; modules='FastCgiModule'; scriptProcessor=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe|$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"; resourceType='Unspecified'} -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/fastCgi' -Value @{fullPath=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe\"; arguments=\"$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"}\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='PYTHONPATH'; value=\"$env:SystemDrive\\PostMaster\\git\"} -AtIndex 0\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='WSGI_HANDLER'; value='app.app'} -AtIndex 1\n\n\n\n\n\n\n\nPostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" and \"127.0.0.1' with the actual values supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:\n\n\ncd C:\\Postmaster\\git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'\n\n\n\n\n\n\n\nPostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:\n\n\npython manage.py createdb\n\n\n\n\n\n\n\nPostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:\n\n\npython manage.py generatekey\n\n\n\n\n\n\n\nYou may now exit the Python virtual environment:\n\n\ndeactivate\n\n\n\n\n\n\n\nRestart IIS to make sure all the changes take effect:\n\n\niisreset\n\n\n\n\n\n\n\nAt this point it is highly recommended that you implement SSL before using PostMaster in production.\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.\n\n\n\n\n\n\nPlease keep in mind that the C:\\PostMaster\\git\\db\\migrations folder should be backed up after installation/updates.\nThis is because PostMaster uses database migrations to safely upgrade the database schema,\nand this folder contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.", 
            "title": "Windows Server 2012 R2"
        }, 
        {
            "location": "/Installation/Windows Server 2012 R2/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  A clean Windows Server 2012 R2 installation with Administrative access", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/Windows Server 2012 R2/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/Windows Server 2012 R2/#installation", 
            "text": "To install IIS and FastCGI, open an Administrative PowerShell window and run the following commands:  Import-Module ServerManager\nInstall-WindowsFeature Web-Server, Web-CGI, Web-Mgmt-Console    To install Python and WFastCGI, Microsoft Web Platform Installer is required. To download it, run the following command:  Invoke-WebRequest -Uri 'http://download.microsoft.com/download/C/F/F/CFF3A0B8-99D4-41A2-AE1A-496C08BEB904/WebPlatformInstaller_amd64_en-US.msi' -OutFile \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\"    Install Microsoft Web Platform Installer:  Start-Process -FilePath 'msiexec.exe' -ArgumentList \"/i $env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi /quiet\" -Wait    Using Microsoft Web Platform Installer, install Python 2.7 and WFastCGI:  Invoke-Expression \"  '$env:ProgramFiles\\Microsoft\\Web Platform Installer\\WebpiCmd.exe' /Install /Products:WFastCgi_21_279 /AcceptEula\"    Delete the Microsoft Web Platform Installer installation file:  Remove-Item \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\" -Force    In order to download the source code for PostMaster, a git client is required. To download git, run the following command:  Invoke-WebRequest -Uri 'https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe' -OutFile \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\"    Install git:  Start-Process -FilePath \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\" -ArgumentList '/VERYSILENT' -Wait    Delete the git installation file:  Remove-Item \"$env:SystemDrive\\Git-2.7.2-64-bit.exe\" -Force    Create a directory to contain PostMaster:  New-Item \"$env:SystemDrive\\PostMaster\" -Type Directory    Create a directory to contain PostMaster logs:  New-Item \"$env:SystemDrive\\PostMaster\\logs\" -Type Directory    Download the PostMaster source code:   \"$env:ProgramFiles\\Git\\bin\\git.exe\" clone 'https://github.com/StackFocus/PostMaster.git' \"$env:SystemDrive\\PostMaster\\git\"    PostMaster will write logs to C:\\PostMaster\\logs\\postmaster.log, but since IIS does not have access to create that file, it must be done manually with the following command:  New-Item \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\" -Type File    In order for PostMaster's files to be secured, the proper permissions must be set. The following command will grant only IIS read access,\nand Administrators full control on PostMaster's files:  cmd.exe /C \"icacls $env:SystemDrive\\PostMaster /inheritance:r /grant BUILTIN\\IIS_IUSRS:(OI)(CI)(RX) /grant BUILTIN\\Administrators:(OI)(CI)F /grant SYSTEM:(OI)(CI)(F)\"    In order for PhoenixPass to be able to write to the log file created earlier, IIS requires write access. To do so, use the following command:  cmd.exe /C \"icacls $env:SystemDrive\\PostMaster\\logs\\postmaster.log /grant BUILTIN\\IIS_IUSRS:(M)\"    A python virtual environment is now required. This allows you to separate the system installed python packages from PostMaster's required python packages.\nThis is done with the following command:   \"$env:SystemDrive\\Python27\\Scripts\\pip.exe\" install virtualenv    Create a Python virtualenv for PostMaster:   \"$env:SystemDrive\\Python27\\Scripts\\virtualenv.exe\" -p \"$env:SystemDrive\\Python27\\python.exe\" \"$env:SystemDrive\\PostMaster\\env\"    To use the newly created virtual environment in your PowerShell window, run the following command:   \"$env:SystemDrive\\PostMaster\\env\\Scripts\\activate.ps1\"    PostMaster requires the Python module \"python-ldap\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:  Invoke-WebRequest -Uri 'https://pypi.python.org/packages/2.7/p/python-ldap/python_ldap-2.4.25-cp27-none-win32.whl#md5=aef7058690dd740d9333af35c270d03a' -OutFile \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"    Install \"python-ldap\":  pip install \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"    Remove the \"python-ldap\" installation file:  Remove-Item \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\" -Force    PostMaster requires the Python module \"mysqlclient\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:  Invoke-WebRequest -Uri 'https://pypi.python.org/packages/cp27/m/mysqlclient/mysqlclient-1.3.7-cp27-none-win32.whl#md5=e9e726fd6f1912af78e2bf6ab56c02f3' -OutFile \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"    Install \"mysqlclient\":  pip install \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"    Remove the \"mysqlclient\" installation file:  Remove-Item \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\" -Force    Install the Python packages that PostMaster requires:  pip install -r \"$env:SystemDrive\\PostMaster\\git\\requirements.txt\"    Copy wfastcgi.py, created by Microsoft Web Platform Installer earlier, to C:\\PostMaster\\git:  Copy-Item -Path \"$env:SystemDrive\\Python27\\Scripts\\wfastcgi.py\" \"$env:SystemDrive\\PostMaster\\git\"    At this point, PostMaster requires an IIS site. You can either use the \"Default Web Site\" and change the virtual directory to C:\\PostMaster\\git,\nor create a new site that points to that directory. This tutorial will use the Default Web Site. To change the virtual directory, use the following commands:  Import-Module WebAdministration\nSet-ItemProperty 'IIS:\\Sites\\Default Web Site\\' -Name physicalPath -Value \"$env:SystemDrive\\PostMaster\\git\"    Now, IIS needs to know how to run PostMaster. The following commands configure FastCGI to be able to use the Python virtual environment created earlier and run PostMaster\n(If you are using a site other than \"Default Web Site\", change that value in the commands below):  Import-Module WebAdministration\nSet-WebConfiguration -Filter '/system.webServer/handlers/@AccessPolicy' -Value 'Read, Script' -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/handlers' -Value @{name='PythonHandler'; path='*'; verb='*'; modules='FastCgiModule'; scriptProcessor=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe|$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"; resourceType='Unspecified'} -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/fastCgi' -Value @{fullPath=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe\"; arguments=\"$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"}\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='PYTHONPATH'; value=\"$env:SystemDrive\\PostMaster\\git\"} -AtIndex 0\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='WSGI_HANDLER'; value='app.app'} -AtIndex 1    PostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" and \"127.0.0.1' with the actual values supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:  cd C:\\Postmaster\\git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'    PostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:  python manage.py createdb    PostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:  python manage.py generatekey    You may now exit the Python virtual environment:  deactivate    Restart IIS to make sure all the changes take effect:  iisreset    At this point it is highly recommended that you implement SSL before using PostMaster in production.    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.    Please keep in mind that the C:\\PostMaster\\git\\db\\migrations folder should be backed up after installation/updates.\nThis is because PostMaster uses database migrations to safely upgrade the database schema,\nand this folder contains auto-generated database migration scripts that allow you to revert back if a database migration ever failed.\nIf this folder is missing, PostMaster can't tell what state your database is in, and therefore, cannot revert back.", 
            "title": "Installation"
        }
    ]
}