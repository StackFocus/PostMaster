{
    "docs": [
        {
            "location": "/", 
            "text": "PostMaster Documentation\n\n\nOverview\n\n\nPostMaster is a beautiful web application to manage domains, users, and aliases on a Linux mail server.\nAfter setting up a Linux mail server using the guide from \nDigitalOcean\n or \nLinode\n,\nyou start to see how tedious it can be to write raw SQL queries to add a new user to your Linux mail server.\nPostMaster abstracts the domain, user, and alias management of your mail server into a responsive web interface, that is both simple to use and secure.\n\n\nAlthough PostMaster was built to work with the database schema instructed in the \nDigitalOcean\n or \nLinode\n guides,\npaid support is available for the developers of PostMaster to customize it to work in your environment.\n\n\nPostMaster is written by Kevin Law and Matthew Prahl.\n\n\nFeatures\n\n\n\n\nAdd, remove, edit, or search domains, users, and aliases on a Linux mail server database\n\n\nResponsive web interface that works great on phones, tablets, and PCs\n\n\nConfigurable auditing to keep track of changes\n\n\nActive Directory LDAP login support\n\n\nFriendly REST APIs to automate tasks\n\n\nRuns on Linux, Docker, and Windows\n\n\n\n\nScreenshots\n\n\nDashboard:\n\n\n\n\nDomains:\n\n\n\n\nUsers:\n\n\n\n\nAliases:\n\n\n\n\nConfigurations:\n\n\n\n\nSearch:\n\n\n\n\nMobile:", 
            "title": "Home"
        }, 
        {
            "location": "/#postmaster-documentation", 
            "text": "", 
            "title": "PostMaster Documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "PostMaster is a beautiful web application to manage domains, users, and aliases on a Linux mail server.\nAfter setting up a Linux mail server using the guide from  DigitalOcean  or  Linode ,\nyou start to see how tedious it can be to write raw SQL queries to add a new user to your Linux mail server.\nPostMaster abstracts the domain, user, and alias management of your mail server into a responsive web interface, that is both simple to use and secure.  Although PostMaster was built to work with the database schema instructed in the  DigitalOcean  or  Linode  guides,\npaid support is available for the developers of PostMaster to customize it to work in your environment.  PostMaster is written by Kevin Law and Matthew Prahl.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Add, remove, edit, or search domains, users, and aliases on a Linux mail server database  Responsive web interface that works great on phones, tablets, and PCs  Configurable auditing to keep track of changes  Active Directory LDAP login support  Friendly REST APIs to automate tasks  Runs on Linux, Docker, and Windows", 
            "title": "Features"
        }, 
        {
            "location": "/#screenshots", 
            "text": "", 
            "title": "Screenshots"
        }, 
        {
            "location": "/#dashboard", 
            "text": "", 
            "title": "Dashboard:"
        }, 
        {
            "location": "/#domains", 
            "text": "", 
            "title": "Domains:"
        }, 
        {
            "location": "/#users", 
            "text": "", 
            "title": "Users:"
        }, 
        {
            "location": "/#aliases", 
            "text": "", 
            "title": "Aliases:"
        }, 
        {
            "location": "/#configurations", 
            "text": "", 
            "title": "Configurations:"
        }, 
        {
            "location": "/#search", 
            "text": "", 
            "title": "Search:"
        }, 
        {
            "location": "/#mobile", 
            "text": "", 
            "title": "Mobile:"
        }, 
        {
            "location": "/Installation/Docker/", 
            "text": "Prerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nA working Docker host\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nMake sure to replace 'docker.postmaster.local' with your Docker host's IP address or DNS:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'docker.postmaster.local' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nFind the URL to the latest tar.gz file containing the PostMaster source code at:\n\n\nhttps://github.com/StackFocus/PostMaster/releases/latest\n\n\n\n\n\n\n\nThen download PostMaster with the URL from the previous step:\n\n\nwget https://github.com/StackFocus/PostMaster/archive/[release version].tar.gz -O ~/postmaster.tar.gz\n\n\n\n\n\n\n\nDecompress the downloaded tar.gz file:\n\n\ntar -xzvf ~/postmaster.tar.gz\n\n\n\n\n\n\n\nBuild the Docker image:\n\n\ncd ~/PostMaster-*\ndocker build -t postmaster .\n\n\n\n\n\n\n\nCreate a directory on the Docker host to contain PostMaster's application and Apache logs:\n\n\nmkdir -p /opt/postmaster_data/logs\n\n\n\n\n\n\n\nRun a PostMaster Docker container from the created image.\nThe -p has the Docker host serve port 80 of the PostMaster container. Change this to what suits your environment.\nThe -e specifies the value of the DB_URI environment variable, which is the URI that PostMaster will use to connect to your mail server's MySQL server.\nThe -v parameter specifies that the /opt/postmaster_data/logs should be mounted as a volume at /opt/postmaster/logs inside the container.\nMake sure to replace 'password_changeme' and 'docker.postmaster.local' with what you configured in step 2 of MySQL Preparation:\n\n\ndocker run \\\n     -p 0.0.0.0:80:8082 \\\n     -e DB_URI=mysql://postmasteruser:password_changeme@docker.postmaster.local:3306/servermail \\\n     -v /opt/postmaster_data/logs:/opt/postmaster/logs \\\n     -d postmaster\n\n\n\nNote: If you plan to deploy PostMaster behind a load-balancer, set the SECRET_KEY environment variable to a\nrandom string (preferably hex characters) that is the same across all running containers behind the load-balancer.\nThis SECRET_KEY is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.", 
            "title": "Docker"
        }, 
        {
            "location": "/Installation/Docker/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  A working Docker host", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/Docker/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nMake sure to replace 'docker.postmaster.local' with your Docker host's IP address or DNS:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'docker.postmaster.local' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/Docker/#installation", 
            "text": "Find the URL to the latest tar.gz file containing the PostMaster source code at:  https://github.com/StackFocus/PostMaster/releases/latest    Then download PostMaster with the URL from the previous step:  wget https://github.com/StackFocus/PostMaster/archive/[release version].tar.gz -O ~/postmaster.tar.gz    Decompress the downloaded tar.gz file:  tar -xzvf ~/postmaster.tar.gz    Build the Docker image:  cd ~/PostMaster-*\ndocker build -t postmaster .    Create a directory on the Docker host to contain PostMaster's application and Apache logs:  mkdir -p /opt/postmaster_data/logs    Run a PostMaster Docker container from the created image.\nThe -p has the Docker host serve port 80 of the PostMaster container. Change this to what suits your environment.\nThe -e specifies the value of the DB_URI environment variable, which is the URI that PostMaster will use to connect to your mail server's MySQL server.\nThe -v parameter specifies that the /opt/postmaster_data/logs should be mounted as a volume at /opt/postmaster/logs inside the container.\nMake sure to replace 'password_changeme' and 'docker.postmaster.local' with what you configured in step 2 of MySQL Preparation:  docker run \\\n     -p 0.0.0.0:80:8082 \\\n     -e DB_URI=mysql://postmasteruser:password_changeme@docker.postmaster.local:3306/servermail \\\n     -v /opt/postmaster_data/logs:/opt/postmaster/logs \\\n     -d postmaster  Note: If you plan to deploy PostMaster behind a load-balancer, set the SECRET_KEY environment variable to a\nrandom string (preferably hex characters) that is the same across all running containers behind the load-balancer.\nThis SECRET_KEY is used by Flask (the Python framework used for PostMaster) for cryptographic functions.    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.", 
            "title": "Installation"
        }, 
        {
            "location": "/Installation/Ubuntu1404/", 
            "text": "Prerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nIf you are installing PostMaster on a separate server, you'll need a clean Ubuntu 14.04 installation.\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nPackage Installation\n\n\nThe PostMaster package can be found on Bintray at \nhttps://bintray.com/stackfocus/deb/PostMaster\n\n\nThis installation method works best on a fresh installation of the operating system.\n\n\n\n\n\n\nRun this command to add to the \n/etc/apt/sources.list\n:\n\n\necho \"deb https://dl.bintray.com/stackfocus/deb {distribution} {components}\" | sudo tee -a /etc/apt/sources.list\n\n\n\n\n\n\n\nInstall the PostMaster package:\n\n\napt-get update \n apt-get install postmaster\n\n\n\n\n\n\n\nStart using the new python virtual environment that PostMaster created\n\n\nsource /opt/postmaster/env/bin/activate\n\n\n\n\n\n\n\nPostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:\n\n\ncd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'\n\n\n\n\n\n\n\nPostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:\n\n\npython manage.py upgradedb\n\n\n\n\n\n\n\nPostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:\n\n\npython manage.py generatekey\n\n\n\n\n\n\n\nYou may now exit from the python virtual environment:\n\n\ndeactivate\n\n\n\n\n\n\n\nPostMaster should now be running on port 8082. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.\n\n\n\n\n\n\nManual Installation\n\n\n\n\n\n\nSwitch to the server that will host PostMaster if applicable, and login as root:\n\n\nsudo su -\n\n\n\n\n\n\n\nUpdate the aptitude package list:\n\n\napt-get update\n\n\n\n\n\n\n\nInstall the required packages for PostMaster:\n\n\napt-get install python python-pip python-dev libldap2-dev libssl-dev libsasl2-dev libffi-dev apache2 libapache2-mod-wsgi mysql-server libmysqlclient-dev\n\n\n\n\n\n\n\nMake sure you are running Python 2.7 as your default Python installation, as PostMaster relies on Python 2.7:\n\n\npython -V\n\n\n\n\n\n\n\nCreate the required directories for PostMaster:\n\n\nmkdir /opt/postmaster\nmkdir /opt/postmaster/logs\n\n\n\n\n\n\n\nFind the URL to the latest tar.gz file containing the PostMaster source code at:\n\n\nhttps://github.com/StackFocus/PostMaster/releases/latest\n\n\n\n\n\n\n\nThen download PostMaster with the URL from the previous step:\n\n\nhttps://github.com/StackFocus/PostMaster/archive/[release version].tar.gz -O ~/postmaster.tar.gz\n\n\n\n\n\n\n\nDecompress the downloaded tar.gz file:\n\n\ntar -xzvf ~/postmaster.tar.gz\n\n\n\n\n\n\n\nMove the decompressed folder containing the source code to /opt/postmaster/git:\n\n\nmv PostMaster-* /opt/postmaster/git\n\n\n\n\n\n\n\nA python virtual environment is now required.\nThis allows you to separate the system installed python packages from PostMaster's required python packages:\n\n\npip install virtualenv\nvirtualenv /opt/postmaster/env\n\n\n\n\n\n\n\nStart using the new python virtual environment\n\n\nsource /opt/postmaster/env/bin/activate\n\n\n\n\n\n\n\nInstall the Python packages required by PostMaster into the python virtual environment:\n\n\ncd /opt/postmaster/git\npip install -r requirements.txt\n\n\n\n\n\n\n\nCreate the PostMaster configuration file from using the sample file that was included:\n\n\ncp -pn /opt/postmaster/git/config.default.py /opt/postmaster/git/config.py\n\n\n\n\n\n\n\nPostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:\n\n\ncd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'\n\n\n\n\n\n\n\nPostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:\n\n\npython manage.py upgradedb\n\n\n\n\n\n\n\nPostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:\n\n\npython manage.py generatekey\n\n\n\n\n\n\n\nYou may now exit from the python virtual environment:\n\n\ndeactivate\n\n\n\n\n\n\n\nProvide the proper permissions on the PostMaster files:\n\n\nchown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster\nchmod 770 /opt/postmaster/logs\n\n\n\n\n\n\n\nDisable the default Apache site:\n\n\na2dissite 000-default.conf\n\n\n\n\n\n\n\nCopy the default PostMaster Apache site configuration and give it the appropriate permissions.\nIt is highly recommended that you implement SSL before using PostMaster in production:\n\n\ncp /opt/postmaster/git/ops/apache.conf /etc/apache2/sites-available/postmaster.conf\nchmod 644 /etc/apache2/sites-available/postmaster.conf\nchown root:root /etc/apache2/sites-available/postmaster.conf\n\n\n\n\n\n\n\nEnable the PostMaster Apache site:\n\n\na2ensite postmaster.conf\n\n\n\n\n\n\n\nRestart Apache for the changes to take effect:\n\n\nservice apache2 restart\n\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.", 
            "title": "Ubuntu 14.04"
        }, 
        {
            "location": "/Installation/Ubuntu1404/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  If you are installing PostMaster on a separate server, you'll need a clean Ubuntu 14.04 installation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/Ubuntu1404/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/Ubuntu1404/#package-installation", 
            "text": "The PostMaster package can be found on Bintray at  https://bintray.com/stackfocus/deb/PostMaster  This installation method works best on a fresh installation of the operating system.    Run this command to add to the  /etc/apt/sources.list :  echo \"deb https://dl.bintray.com/stackfocus/deb {distribution} {components}\" | sudo tee -a /etc/apt/sources.list    Install the PostMaster package:  apt-get update   apt-get install postmaster    Start using the new python virtual environment that PostMaster created  source /opt/postmaster/env/bin/activate    PostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:  cd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'    PostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:  python manage.py upgradedb    PostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:  python manage.py generatekey    You may now exit from the python virtual environment:  deactivate    PostMaster should now be running on port 8082. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.", 
            "title": "Package Installation"
        }, 
        {
            "location": "/Installation/Ubuntu1404/#manual-installation", 
            "text": "Switch to the server that will host PostMaster if applicable, and login as root:  sudo su -    Update the aptitude package list:  apt-get update    Install the required packages for PostMaster:  apt-get install python python-pip python-dev libldap2-dev libssl-dev libsasl2-dev libffi-dev apache2 libapache2-mod-wsgi mysql-server libmysqlclient-dev    Make sure you are running Python 2.7 as your default Python installation, as PostMaster relies on Python 2.7:  python -V    Create the required directories for PostMaster:  mkdir /opt/postmaster\nmkdir /opt/postmaster/logs    Find the URL to the latest tar.gz file containing the PostMaster source code at:  https://github.com/StackFocus/PostMaster/releases/latest    Then download PostMaster with the URL from the previous step:  https://github.com/StackFocus/PostMaster/archive/[release version].tar.gz -O ~/postmaster.tar.gz    Decompress the downloaded tar.gz file:  tar -xzvf ~/postmaster.tar.gz    Move the decompressed folder containing the source code to /opt/postmaster/git:  mv PostMaster-* /opt/postmaster/git    A python virtual environment is now required.\nThis allows you to separate the system installed python packages from PostMaster's required python packages:  pip install virtualenv\nvirtualenv /opt/postmaster/env    Start using the new python virtual environment  source /opt/postmaster/env/bin/activate    Install the Python packages required by PostMaster into the python virtual environment:  cd /opt/postmaster/git\npip install -r requirements.txt    Create the PostMaster configuration file from using the sample file that was included:  cp -pn /opt/postmaster/git/config.default.py /opt/postmaster/git/config.py    PostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" with the actual password supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:  cd /opt/postmaster/git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'    PostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:  python manage.py upgradedb    PostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:  python manage.py generatekey    You may now exit from the python virtual environment:  deactivate    Provide the proper permissions on the PostMaster files:  chown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster\nchmod 770 /opt/postmaster/logs    Disable the default Apache site:  a2dissite 000-default.conf    Copy the default PostMaster Apache site configuration and give it the appropriate permissions.\nIt is highly recommended that you implement SSL before using PostMaster in production:  cp /opt/postmaster/git/ops/apache.conf /etc/apache2/sites-available/postmaster.conf\nchmod 644 /etc/apache2/sites-available/postmaster.conf\nchown root:root /etc/apache2/sites-available/postmaster.conf    Enable the PostMaster Apache site:  a2ensite postmaster.conf    Restart Apache for the changes to take effect:  service apache2 restart    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/Installation/WindowsServer2012R2/", 
            "text": "Prerequisites\n\n\n\n\nAn Ubuntu 14.04 mail server configured with the guide from \nDigitalOcean\n or \nLinode\n.\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.\n\n\nA clean Windows Server 2012 R2 installation with Administrative access\n\n\n\n\nMySQL Preparation\n\n\n\n\n\n\nStart by logging into the MySQL server that your mail server uses:\n\n\nmysql -u root -p\n\n\n\n\n\n\n\nOnce you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:\n\n\nGRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';\n\n\n\n\n\n\n\nExit from MySQL:\n\n\nexit\n\n\n\n\n\n\n\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:\n\n\n/etc/mysql/my.cnf\n\n\n\n\n\n\n\nInstallation\n\n\n\n\n\n\nTo install IIS and FastCGI, open an Administrative PowerShell window and run the following commands:\n\n\nImport-Module ServerManager\nInstall-WindowsFeature Web-Server, Web-CGI, Web-Mgmt-Console\n\n\n\n\n\n\n\nTo install Python and WFastCGI, Microsoft Web Platform Installer is required. To download it, run the following command:\n\n\nInvoke-WebRequest -Uri 'http://download.microsoft.com/download/C/F/F/CFF3A0B8-99D4-41A2-AE1A-496C08BEB904/WebPlatformInstaller_amd64_en-US.msi' -OutFile \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\"\n\n\n\n\n\n\n\nInstall Microsoft Web Platform Installer:\n\n\nStart-Process -FilePath 'msiexec.exe' -ArgumentList \"/i $env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi /quiet\" -Wait\n\n\n\n\n\n\n\nUsing Microsoft Web Platform Installer, install Python 2.7 and WFastCGI:\n\n\nInvoke-Expression \"\n '$env:ProgramFiles\\Microsoft\\Web Platform Installer\\WebpiCmd.exe' /Install /Products:WFastCgi_21_279 /AcceptEula\"\n\n\n\n\n\n\n\nDelete the Microsoft Web Platform Installer installation file:\n\n\nRemove-Item \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\" -Force\n\n\n\n\n\n\n\nFind the URL to the latest zip file containing the PostMaster source code at:\n\n\nhttps://github.com/StackFocus/PostMaster/releases/latest\n\n\n\n\n\n\n\nThen download PostMaster with the URL from the previous step:\n\n\nInvoke-WebRequest 'https://github.com/StackFocus/PostMaster/archive/[release version].zip' -OutFile \"$env:SystemDrive\\postmaster.zip\"\n\n\n\n\n\n\n\nThen unzip the downloaded zip file:\n\n\nAdd-Type -AssemblyName System.IO.Compression.FileSystem\n[System.IO.Compression.ZipFile]::ExtractToDirectory(\"$env:SystemDrive\\postmaster.zip\", \"$env:SystemDrive\\\")\n\n\n\n\n\n\n\nMove the downloaded source code to C:\\PostMaster:\n\n\n$folder = Get-ChildItem \"$env:SystemDrive\\\" | Where-Object {$_.Name -like \"*Postmaster-*\"} | Select-Object -First 1\nMove-Item $folder \"$env:SystemDrive\\PostMaster\"\n\n\n\n\n\n\n\nDelete the downloaded zip file:\n\n\nRemove-Item 'postmaster.zip' -Force\n\n\n\n\n\n\n\nCreate a directory to contain PostMaster logs:\n\n\nNew-Item \"$env:SystemDrive\\PostMaster\\logs\" -Type Directory\n\n\n\n\n\n\n\nDownload the PostMaster source code:\n\n\n \"$env:ProgramFiles\\Git\\bin\\git.exe\" clone 'https://github.com/StackFocus/PostMaster.git' \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nPostMaster will write logs to C:\\PostMaster\\logs\\postmaster.log, but since IIS does not have access to create that file, it must be done manually with the following command:\n\n\nNew-Item \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\" -Type File\n\n\n\n\n\n\n\nIn order for PostMaster's files to be secured, the proper permissions must be set. The following command will grant only IIS read access,\nand Administrators full control on PostMaster's files:\n\n\ncmd.exe /C \"icacls $env:SystemDrive\\PostMaster /inheritance:r /grant BUILTIN\\IIS_IUSRS:(OI)(CI)(RX) /grant BUILTIN\\Administrators:(OI)(CI)F /grant SYSTEM:(OI)(CI)(F)\"\n\n\n\n\n\n\n\nIn order for PhoenixPass to be able to write to the log file created earlier, IIS requires write access. To do so, use the following command:\n\n\ncmd.exe /C \"icacls $env:SystemDrive\\PostMaster\\logs\\postmaster.log /grant BUILTIN\\IIS_IUSRS:(M)\"\n\n\n\n\n\n\n\nA python virtual environment is now required. This allows you to separate the system installed python packages from PostMaster's required python packages.\nThis is done with the following command:\n\n\n \"$env:SystemDrive\\Python27\\Scripts\\pip.exe\" install virtualenv\n\n\n\n\n\n\n\nCreate a Python virtualenv for PostMaster:\n\n\n \"$env:SystemDrive\\Python27\\Scripts\\virtualenv.exe\" -p \"$env:SystemDrive\\Python27\\python.exe\" \"$env:SystemDrive\\PostMaster\\env\"\n\n\n\n\n\n\n\nTo use the newly created virtual environment in your PowerShell window, run the following command:\n\n\n \"$env:SystemDrive\\PostMaster\\env\\Scripts\\activate.ps1\"\n\n\n\n\n\n\n\nPostMaster requires the Python module \"python-ldap\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:\n\n\nInvoke-WebRequest -Uri 'https://pypi.python.org/packages/2.7/p/python-ldap/python_ldap-2.4.25-cp27-none-win32.whl#md5=aef7058690dd740d9333af35c270d03a' -OutFile \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nInstall \"python-ldap\":\n\n\npip install \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nRemove the \"python-ldap\" installation file:\n\n\nRemove-Item \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\" -Force\n\n\n\n\n\n\n\nPostMaster requires the Python module \"mysqlclient\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:\n\n\nInvoke-WebRequest -Uri 'https://pypi.python.org/packages/cp27/m/mysqlclient/mysqlclient-1.3.7-cp27-none-win32.whl#md5=e9e726fd6f1912af78e2bf6ab56c02f3' -OutFile \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nInstall \"mysqlclient\":\n\n\npip install \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"\n\n\n\n\n\n\n\nRemove the \"mysqlclient\" installation file:\n\n\nRemove-Item \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\" -Force\n\n\n\n\n\n\n\nInstall the Python packages that PostMaster requires:\n\n\npip install -r \"$env:SystemDrive\\PostMaster\\git\\requirements.txt\"\n\n\n\n\n\n\n\nCreate the PostMaster configuration file from using the sample file that was included:\n\n\nCopy-Item \"$env:SystemDrive\\PostMaster\\git\\config.default.py \"$env:SystemDrive\\PostMaster\\git\\config.py\"\n\n\n\n\n\n\n\nCopy wfastcgi.py, created by Microsoft Web Platform Installer earlier, to C:\\PostMaster\\git:\n\n\nCopy-Item \"$env:SystemDrive\\Python27\\Scripts\\wfastcgi.py\" \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nAt this point, PostMaster requires an IIS site. You can either use the \"Default Web Site\" and change the virtual directory to C:\\PostMaster\\git,\nor create a new site that points to that directory. This tutorial will use the Default Web Site. To change the virtual directory, use the following commands:\n\n\nImport-Module WebAdministration\nSet-ItemProperty 'IIS:\\Sites\\Default Web Site\\' -Name physicalPath -Value \"$env:SystemDrive\\PostMaster\\git\"\n\n\n\n\n\n\n\nNow, IIS needs to know how to run PostMaster. The following commands configure FastCGI to be able to use the Python virtual environment created earlier and run PostMaster\n(If you are using a site other than \"Default Web Site\", change that value in the commands below):\n\n\nImport-Module WebAdministration\nSet-WebConfiguration -Filter '/system.webServer/handlers/@AccessPolicy' -Value 'Read, Script' -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/handlers' -Value @{name='PythonHandler'; path='*'; verb='*'; modules='FastCgiModule'; scriptProcessor=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe|$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"; resourceType='Unspecified'} -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/fastCgi' -Value @{fullPath=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe\"; arguments=\"$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"}\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='PYTHONPATH'; value=\"$env:SystemDrive\\PostMaster\\git\"} -AtIndex 0\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='WSGI_HANDLER'; value='app.app'} -AtIndex 1\n\n\n\n\n\n\n\nPostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" and \"127.0.0.1' with the actual values supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:\n\n\ncd C:\\Postmaster\\git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'\n\n\n\n\n\n\n\nPostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:\n\n\npython manage.py upgradedb\n\n\n\n\n\n\n\nPostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:\n\n\npython manage.py generatekey\n\n\n\n\n\n\n\nBy deafult, PostMaster logs to a Linux based path, run the following command to change the log to the text file created in step 11:\n\n\npython manage.py setlogfile \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\"\n\n\n\n\n\n\n\nYou may now exit the Python virtual environment:\n\n\ndeactivate\n\n\n\n\n\n\n\nRestart IIS to make sure all the changes take effect:\n\n\niisreset\n\n\n\n\n\n\n\nAt this point it is highly recommended that you implement SSL before using PostMaster in production.\n\n\n\n\n\n\nPostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -\n Administrators.", 
            "title": "Windows Server 2012 R2"
        }, 
        {
            "location": "/Installation/WindowsServer2012R2/#prerequisites", 
            "text": "An Ubuntu 14.04 mail server configured with the guide from  DigitalOcean  or  Linode .\nAny other MySQL configuration requires edits to PostMaster's database models. Paid support for this is available.  A clean Windows Server 2012 R2 installation with Administrative access", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Installation/WindowsServer2012R2/#mysql-preparation", 
            "text": "Start by logging into the MySQL server that your mail server uses:  mysql -u root -p    Once you've logged into MySQL, create a PostMaster MySQL user that has privileges to edit the tables for the servermail database.\nIf you are installing PostMaster on a server other than where your mail server's MySQL server is installed,\nreplace '127.0.0.1' with the server's IP address or DNS that is going to host PostMaster:  GRANT ALL PRIVILEGES ON servermail.* TO 'postmasteruser'@'127.0.0.1' IDENTIFIED BY 'password_changeme';    Exit from MySQL:  exit    If you are installing PostMaster on a server other than where your mail server's MySQL server is installed, make sure that\nbind-address is set 0.0.0.0 and not 127.0.0.1 in:  /etc/mysql/my.cnf", 
            "title": "MySQL Preparation"
        }, 
        {
            "location": "/Installation/WindowsServer2012R2/#installation", 
            "text": "To install IIS and FastCGI, open an Administrative PowerShell window and run the following commands:  Import-Module ServerManager\nInstall-WindowsFeature Web-Server, Web-CGI, Web-Mgmt-Console    To install Python and WFastCGI, Microsoft Web Platform Installer is required. To download it, run the following command:  Invoke-WebRequest -Uri 'http://download.microsoft.com/download/C/F/F/CFF3A0B8-99D4-41A2-AE1A-496C08BEB904/WebPlatformInstaller_amd64_en-US.msi' -OutFile \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\"    Install Microsoft Web Platform Installer:  Start-Process -FilePath 'msiexec.exe' -ArgumentList \"/i $env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi /quiet\" -Wait    Using Microsoft Web Platform Installer, install Python 2.7 and WFastCGI:  Invoke-Expression \"  '$env:ProgramFiles\\Microsoft\\Web Platform Installer\\WebpiCmd.exe' /Install /Products:WFastCgi_21_279 /AcceptEula\"    Delete the Microsoft Web Platform Installer installation file:  Remove-Item \"$env:SystemDrive\\WebPlatformInstaller_amd64_en-US.msi\" -Force    Find the URL to the latest zip file containing the PostMaster source code at:  https://github.com/StackFocus/PostMaster/releases/latest    Then download PostMaster with the URL from the previous step:  Invoke-WebRequest 'https://github.com/StackFocus/PostMaster/archive/[release version].zip' -OutFile \"$env:SystemDrive\\postmaster.zip\"    Then unzip the downloaded zip file:  Add-Type -AssemblyName System.IO.Compression.FileSystem\n[System.IO.Compression.ZipFile]::ExtractToDirectory(\"$env:SystemDrive\\postmaster.zip\", \"$env:SystemDrive\\\")    Move the downloaded source code to C:\\PostMaster:  $folder = Get-ChildItem \"$env:SystemDrive\\\" | Where-Object {$_.Name -like \"*Postmaster-*\"} | Select-Object -First 1\nMove-Item $folder \"$env:SystemDrive\\PostMaster\"    Delete the downloaded zip file:  Remove-Item 'postmaster.zip' -Force    Create a directory to contain PostMaster logs:  New-Item \"$env:SystemDrive\\PostMaster\\logs\" -Type Directory    Download the PostMaster source code:   \"$env:ProgramFiles\\Git\\bin\\git.exe\" clone 'https://github.com/StackFocus/PostMaster.git' \"$env:SystemDrive\\PostMaster\\git\"    PostMaster will write logs to C:\\PostMaster\\logs\\postmaster.log, but since IIS does not have access to create that file, it must be done manually with the following command:  New-Item \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\" -Type File    In order for PostMaster's files to be secured, the proper permissions must be set. The following command will grant only IIS read access,\nand Administrators full control on PostMaster's files:  cmd.exe /C \"icacls $env:SystemDrive\\PostMaster /inheritance:r /grant BUILTIN\\IIS_IUSRS:(OI)(CI)(RX) /grant BUILTIN\\Administrators:(OI)(CI)F /grant SYSTEM:(OI)(CI)(F)\"    In order for PhoenixPass to be able to write to the log file created earlier, IIS requires write access. To do so, use the following command:  cmd.exe /C \"icacls $env:SystemDrive\\PostMaster\\logs\\postmaster.log /grant BUILTIN\\IIS_IUSRS:(M)\"    A python virtual environment is now required. This allows you to separate the system installed python packages from PostMaster's required python packages.\nThis is done with the following command:   \"$env:SystemDrive\\Python27\\Scripts\\pip.exe\" install virtualenv    Create a Python virtualenv for PostMaster:   \"$env:SystemDrive\\Python27\\Scripts\\virtualenv.exe\" -p \"$env:SystemDrive\\Python27\\python.exe\" \"$env:SystemDrive\\PostMaster\\env\"    To use the newly created virtual environment in your PowerShell window, run the following command:   \"$env:SystemDrive\\PostMaster\\env\\Scripts\\activate.ps1\"    PostMaster requires the Python module \"python-ldap\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:  Invoke-WebRequest -Uri 'https://pypi.python.org/packages/2.7/p/python-ldap/python_ldap-2.4.25-cp27-none-win32.whl#md5=aef7058690dd740d9333af35c270d03a' -OutFile \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"    Install \"python-ldap\":  pip install \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\"    Remove the \"python-ldap\" installation file:  Remove-Item \"$env:SystemDrive\\python_ldap-2.4.25-cp27-none-win32.whl\" -Force    PostMaster requires the Python module \"mysqlclient\". Because it is difficult to compile it manually on Windows, this tutorial will use a precompiled version. To download it, use the following command:  Invoke-WebRequest -Uri 'https://pypi.python.org/packages/cp27/m/mysqlclient/mysqlclient-1.3.7-cp27-none-win32.whl#md5=e9e726fd6f1912af78e2bf6ab56c02f3' -OutFile \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"    Install \"mysqlclient\":  pip install \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\"    Remove the \"mysqlclient\" installation file:  Remove-Item \"$env:SystemDrive\\mysqlclient-1.3.7-cp27-none-win32.whl\" -Force    Install the Python packages that PostMaster requires:  pip install -r \"$env:SystemDrive\\PostMaster\\git\\requirements.txt\"    Create the PostMaster configuration file from using the sample file that was included:  Copy-Item \"$env:SystemDrive\\PostMaster\\git\\config.default.py \"$env:SystemDrive\\PostMaster\\git\\config.py\"    Copy wfastcgi.py, created by Microsoft Web Platform Installer earlier, to C:\\PostMaster\\git:  Copy-Item \"$env:SystemDrive\\Python27\\Scripts\\wfastcgi.py\" \"$env:SystemDrive\\PostMaster\\git\"    At this point, PostMaster requires an IIS site. You can either use the \"Default Web Site\" and change the virtual directory to C:\\PostMaster\\git,\nor create a new site that points to that directory. This tutorial will use the Default Web Site. To change the virtual directory, use the following commands:  Import-Module WebAdministration\nSet-ItemProperty 'IIS:\\Sites\\Default Web Site\\' -Name physicalPath -Value \"$env:SystemDrive\\PostMaster\\git\"    Now, IIS needs to know how to run PostMaster. The following commands configure FastCGI to be able to use the Python virtual environment created earlier and run PostMaster\n(If you are using a site other than \"Default Web Site\", change that value in the commands below):  Import-Module WebAdministration\nSet-WebConfiguration -Filter '/system.webServer/handlers/@AccessPolicy' -Value 'Read, Script' -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/handlers' -Value @{name='PythonHandler'; path='*'; verb='*'; modules='FastCgiModule'; scriptProcessor=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe|$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"; resourceType='Unspecified'} -PSPath 'IIS:\\' -Location 'Default Web Site'\nAdd-WebConfiguration -Filter '/system.webServer/fastCgi' -Value @{fullPath=\"$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe\"; arguments=\"$env:SystemDrive\\PostMaster\\git\\wfastcgi.py\"}\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='PYTHONPATH'; value=\"$env:SystemDrive\\PostMaster\\git\"} -AtIndex 0\nAdd-WebConfiguration -Filter \"/system.webServer/fastCgi/application[@fullPath='$env:SystemDrive\\PostMaster\\env\\Scripts\\python.exe' and @arguments='$env:SystemDrive\\PostMaster\\git\\wfastcgi.py']/environmentVariables\" -Value @{name='WSGI_HANDLER'; value='app.app'} -AtIndex 1    PostMaster needs to be configured to connect to the MySQL database using the MySQL user created in step 2 of MySQL Preparation.\nMake sure to replace \"password_changeme\" and \"127.0.0.1' with the actual values supplied in step 2 of MySQL Preparation, and if needed,\nreplace '127.0.0.1' with the IP address or DNS specified in step 2 of MySQL Preparation:  cd C:\\Postmaster\\git\npython manage.py setdburi 'mysql://postmasteruser:password_changeme@127.0.0.1:3306/servermail'    PostMaster needs to create a few tables under the servermail database. This is done via a database migration,\nwhich means that only the necessary changes to the database are made, and these changes are reversible if something went wrong.\nTo start the migration, run the following command:  python manage.py upgradedb    PostMaster uses a secret key for certain cryptographic functions. To generate a random key, run the following command:  python manage.py generatekey    By deafult, PostMaster logs to a Linux based path, run the following command to change the log to the text file created in step 11:  python manage.py setlogfile \"$env:SystemDrive\\PostMaster\\logs\\postmaster.log\"    You may now exit the Python virtual environment:  deactivate    Restart IIS to make sure all the changes take effect:  iisreset    At this point it is highly recommended that you implement SSL before using PostMaster in production.    PostMaster should now be running. Simply use the username \"admin\" and the password \"PostMaster\" to login.\nYou can change your username and password from Manage -  Administrators.", 
            "title": "Installation"
        }, 
        {
            "location": "/Configuration/CommandLineConfiguration/", 
            "text": "Before You Start\n\n\n\n\n\n\nLogged into the server hosting PostMaster as root or as an administrator, enter the Python virtual environment (if necessary, replace the path with your install location):\n\n\nLinux:\nsource /opt/postmaster/env/bin/activate\nWindows:\nC:\\PostMaster\\env\\Scripts\\activate.ps1\n\n\n\n\n\n\n\nOnce you've entered the Python virtual environment, navigate to the location of manage.py (replace /opt/postmaster/git with your install location):\n\n\ncd /opt/postmaster/git\n\n\n\n\n\n\n\nYou can now run command line configurations with the following:\n\n\npython manage.py [command]\n\n\n\n\n\n\n\nSome of the commands modify files and may end up changing the ownership of the files on Linux/Unix operating systems.\nUse the following commands to restore the proper permissions on the PostMaster files:\n\n\nchown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster\n\n\n\n\n\n\n\nCommand Line Commands\n\n\nversion\n returns the version of PostMaster that is installed.\n\n\nsetlogfile\n sets the location of the logfile. The default is \n/opt/postmaster/logs/postmaster.log\n.\n\n\nsetdburi\n sets the MySQL database URI that PostMaster uses to connect to the MySQL server used by your mail server.\n\n\nupgradedb\n upgrades the existing database to the latest schema version and adds the default configuration items if they are missing.\n\n\ngeneratekey\n replaces the secret key in config.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\nAfter the initial installation, this command should not be run again as all current logins would become invalid upon the next restart of the PostMaster.\n\n\nsetkey\n replaces the secret key with one provided in config.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\n\n\nunlockadmin username\n unlocks a locked out administrator (replace username with the actual value).\n\n\nresetadminpassword username password\n resets an administrator's password to the desired value (replace user and password with the actual values)\n\n\nrunserver -d -h 0.0.0.0\n runs PostMaster in debug mode on port 5000. This is useful if you are having issues as it bypasses the webserver\nand displays failing errors in HTML.\n\n\ndb [command]\n runs advanced database migration commands.\nIt is recommended to use the wrapper commands listed above instead, however, in rare and advanced circumstances, these sets of commands may be necessary.\nFor more information, visit the \nAlembic API documentation\n.", 
            "title": "Command Line Configuration"
        }, 
        {
            "location": "/Configuration/CommandLineConfiguration/#before-you-start", 
            "text": "Logged into the server hosting PostMaster as root or as an administrator, enter the Python virtual environment (if necessary, replace the path with your install location):  Linux:\nsource /opt/postmaster/env/bin/activate\nWindows:\nC:\\PostMaster\\env\\Scripts\\activate.ps1    Once you've entered the Python virtual environment, navigate to the location of manage.py (replace /opt/postmaster/git with your install location):  cd /opt/postmaster/git    You can now run command line configurations with the following:  python manage.py [command]    Some of the commands modify files and may end up changing the ownership of the files on Linux/Unix operating systems.\nUse the following commands to restore the proper permissions on the PostMaster files:  chown -R www-data:www-data /opt/postmaster\nchmod -R 550 /opt/postmaster", 
            "title": "Before You Start"
        }, 
        {
            "location": "/Configuration/CommandLineConfiguration/#command-line-commands", 
            "text": "version  returns the version of PostMaster that is installed.  setlogfile  sets the location of the logfile. The default is  /opt/postmaster/logs/postmaster.log .  setdburi  sets the MySQL database URI that PostMaster uses to connect to the MySQL server used by your mail server.  upgradedb  upgrades the existing database to the latest schema version and adds the default configuration items if they are missing.  generatekey  replaces the secret key in config.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.\nAfter the initial installation, this command should not be run again as all current logins would become invalid upon the next restart of the PostMaster.  setkey  replaces the secret key with one provided in config.py which is used by Flask (the Python framework used for PostMaster) for cryptographic functions.  unlockadmin username  unlocks a locked out administrator (replace username with the actual value).  resetadminpassword username password  resets an administrator's password to the desired value (replace user and password with the actual values)  runserver -d -h 0.0.0.0  runs PostMaster in debug mode on port 5000. This is useful if you are having issues as it bypasses the webserver\nand displays failing errors in HTML.  db [command]  runs advanced database migration commands.\nIt is recommended to use the wrapper commands listed above instead, however, in rare and advanced circumstances, these sets of commands may be necessary.\nFor more information, visit the  Alembic API documentation .", 
            "title": "Command Line Commands"
        }, 
        {
            "location": "/Configuration/ConfigurationsPage/", 
            "text": "Minimum Password Length\n specifies the minimum password length that all mail users and administrators must adhere to.\n\n\nAccount Lockout Threshold\n specifies the number of failed login attempts a local account must make before being locked out.\nTo disable account lockouts, set this value to 0.\n\n\nAccount Lockout Duration in Minutes\n specifies the amount of time an account will be locked out for.\n\n\nReset Account Lockout Counter in Minutes\n determines how long a bad password attempt will count towards a lockout.\nAs an example, this value is set to 30, and an administrator entered an incorrect password twice; then the administrator returned 30 minutes later to try again,\nthe two failed password attempts would no longer count because the configured 30 minutes would have elapsed.\n\n\nLogin Auditing\n determines whether login and logout events are recorded in the log file.\n\n\nMail Database Auditing\n determines whether changes to domains, users, aliases, administrators, and configuration settings should be recorded in the log file.\n\n\nEnable LDAP Authentication\n determines whether Active Directory LDAP authentication is turned on or off. In order to enable LDAP authentication,\nthe \"AD Server LDAP String\", \"AD Domain\", and \"AD PostMaster Group\" must be configured.\n\n\nAD Server LDAP String\n specifies the LDAP string used to connect to Active Directory. For instance, if you are using LDAPS and you have a Domain called postmaster.local,\nyou can specify \"LDAPS://postmaster.local:636\", since postmaster.local should be a round robin to all of your Domain Controllers. You can also chose to target a specific Domain Controller\nsuch as \"LDAPS://dc1.postmaster.local:636\". Although not recommended, you can also use LDAP without SSL by specifying something like \"LDAP://postmaster.local\".\n\n\nAD Domain\n specifies the fully qualified domain name of your Active Directory Domain (i.e. postmaster.local).\n\n\nAD PostMaster Group\n specifies the Active Directory group name that Active Directory users must be a member of in order to be an administrator of PostMaster.\nThis setting's value must be the same as the \"Group name (pre-Windows 2000)\" value of the desired group as shown in the screenshot below.", 
            "title": "Configurations Page"
        }, 
        {
            "location": "/API/ApiUsage/", 
            "text": "API Documentation\n\n\n\n\nOpenAPI Specification (Swagger)\n  \n\n\nOpenAPI Specification File (Swagger)\n\n\n\n\nCurl Example\n\n\nFor local PostMaster authentication, use the following command (session.txt is used to store your login session):  \n\n\ncurl https://postmaster.example.local/login --data 'username=admin\npassword=PostMaster\nauth_source=PostMaster User' -c session.txt\n\n\n\n\nFor LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session.txt is used to store your login session):\n\n\ncurl https://postmaster.example.local/login --data 'username=user@example.local\npassword=password\nauth_source=example.local' -c session.txt\n\n\n\n\nOnce you are logged in, you can use the following command to query the API:\n\n\ncurl https://postmaster.example.local/api/v1/domains -b session.txt\n\n\n\n\nPowerShell Example (v3+)\n\n\nFor local PostMaster authentication, use the following command (session is a variable used to store your login session):  \n\n\nInvoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'PostMaster'; auth_source = 'PostMaster User'}\n\n\n\n\nFor LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session is a variable used to store your login session):\n\n\nInvoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'password'; auth_source = 'example.local'}\n\n\n\n\nOnce you are logged in, you can use the following command to query the API:\n\n\nInvoke-RestMethod -Uri 'http://postmaster.example.local/api/v1/domains' -WebSession $session", 
            "title": "API Usage"
        }, 
        {
            "location": "/API/ApiUsage/#api-documentation", 
            "text": "OpenAPI Specification (Swagger)     OpenAPI Specification File (Swagger)", 
            "title": "API Documentation"
        }, 
        {
            "location": "/API/ApiUsage/#curl-example", 
            "text": "For local PostMaster authentication, use the following command (session.txt is used to store your login session):    curl https://postmaster.example.local/login --data 'username=admin password=PostMaster auth_source=PostMaster User' -c session.txt  For LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session.txt is used to store your login session):  curl https://postmaster.example.local/login --data 'username=user@example.local password=password auth_source=example.local' -c session.txt  Once you are logged in, you can use the following command to query the API:  curl https://postmaster.example.local/api/v1/domains -b session.txt", 
            "title": "Curl Example"
        }, 
        {
            "location": "/API/ApiUsage/#powershell-example-v3", 
            "text": "For local PostMaster authentication, use the following command (session is a variable used to store your login session):    Invoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'PostMaster'; auth_source = 'PostMaster User'}  For LDAP authentication, set auth_source with the value from the \"AD Domain\" setting on the configurations page (session is a variable used to store your login session):  Invoke-WebRequest -Uri 'http://postmaster.example.local/login' -Method 'Post' -SessionVariable 'session' -Body @{username = 'admin'; password = 'password'; auth_source = 'example.local'}  Once you are logged in, you can use the following command to query the API:  Invoke-RestMethod -Uri 'http://postmaster.example.local/api/v1/domains' -WebSession $session", 
            "title": "PowerShell Example (v3+)"
        }, 
        {
            "location": "/Development/DevEnvironment/", 
            "text": "Overview\n\n\nPostMaster uses a combination of \nVagrant\n and \nAnsible\n to\nautomate the setup of a development environment. In this scenario, Ansible is run entirely on the guest, and is thus\nnot required on the host system.\n\n\nGetting Started\n\n\n\n\n\n\nInstall Vagrant by using your package manager or downloading it at:\n\nhttps://www.vagrantup.com/downloads.html\n\n\n\n\n\n\nRun \nvagrant up\n as root/administrator to provision a Vagrant guest (development VM)\n\n\n\n\n\n\nAccess PostMaster at \nhttp://localhost:8080\n via your web browser\n\n\n\n\n\n\nLogin using the username \"admin\" and the password \"PostMaster\"\n\n\n\n\n\n\nFor more help with Vagrant, such as deleting and recreating your development environment, visit\n\nhttps://www.vagrantup.com/docs/cli/\n\n\n\n\n\n\nAdditional Information:\n\n\n\n\nThe Vagrant guest is running a local MySQL instance which can be accessed locally with \nmysql -uroot -pvagrant\n\n\nThe Vagrant guest is not running a mail server\n\n\n\n\nCode Updates\n\n\nThe source code is located on the Vagrant guest at \n/opt/postmaster/git\n, but code changes made locally\nwill be automatically synced to the development VM via Vagrant.\n\n\nActivate the virtualenv\n\n\nOn the guest, run the following:\n\n\n$ source /opt/postmaster/env/bin/activate\n\n\n\n\nApply the Code Updates\n\n\nAny Python file updates will require you to restart Apache on the Vagrant guest. To do so, run the following on\nthe Vagrant guest:\n\n\n$ sudo service apache2 restart\n\n\n\n\nRun the Unit Tests\n\n\nOn the Vagrant guest, activate the virtualenv (see above) and run the following in \"/opt/postmaster/git\":\n\n\n$ py.test tests\n\n\n\n\nChecking Logs\n\n\nLogs can be found on the Vagrant guest at the following locations:\n\n\n/opt/postmaster/logs/postmaster.log\n/opt/postmaster/logs/postmaster.access.log\n/opt/postmaster/logs/postmaster.error.log", 
            "title": "Dev Environment"
        }, 
        {
            "location": "/Development/DevEnvironment/#overview", 
            "text": "PostMaster uses a combination of  Vagrant  and  Ansible  to\nautomate the setup of a development environment. In this scenario, Ansible is run entirely on the guest, and is thus\nnot required on the host system.", 
            "title": "Overview"
        }, 
        {
            "location": "/Development/DevEnvironment/#getting-started", 
            "text": "Install Vagrant by using your package manager or downloading it at: https://www.vagrantup.com/downloads.html    Run  vagrant up  as root/administrator to provision a Vagrant guest (development VM)    Access PostMaster at  http://localhost:8080  via your web browser    Login using the username \"admin\" and the password \"PostMaster\"    For more help with Vagrant, such as deleting and recreating your development environment, visit https://www.vagrantup.com/docs/cli/    Additional Information:   The Vagrant guest is running a local MySQL instance which can be accessed locally with  mysql -uroot -pvagrant  The Vagrant guest is not running a mail server", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Development/DevEnvironment/#code-updates", 
            "text": "The source code is located on the Vagrant guest at  /opt/postmaster/git , but code changes made locally\nwill be automatically synced to the development VM via Vagrant.", 
            "title": "Code Updates"
        }, 
        {
            "location": "/Development/DevEnvironment/#activate-the-virtualenv", 
            "text": "On the guest, run the following:  $ source /opt/postmaster/env/bin/activate", 
            "title": "Activate the virtualenv"
        }, 
        {
            "location": "/Development/DevEnvironment/#apply-the-code-updates", 
            "text": "Any Python file updates will require you to restart Apache on the Vagrant guest. To do so, run the following on\nthe Vagrant guest:  $ sudo service apache2 restart", 
            "title": "Apply the Code Updates"
        }, 
        {
            "location": "/Development/DevEnvironment/#run-the-unit-tests", 
            "text": "On the Vagrant guest, activate the virtualenv (see above) and run the following in \"/opt/postmaster/git\":  $ py.test tests", 
            "title": "Run the Unit Tests"
        }, 
        {
            "location": "/Development/DevEnvironment/#checking-logs", 
            "text": "Logs can be found on the Vagrant guest at the following locations:  /opt/postmaster/logs/postmaster.log\n/opt/postmaster/logs/postmaster.access.log\n/opt/postmaster/logs/postmaster.error.log", 
            "title": "Checking Logs"
        }, 
        {
            "location": "/Development/Contributing/", 
            "text": "Types of Contributions\n\n\nBug Reports\n\n\nReport bugs and issues at \nhttps://github.com/StackFocus/PostMaster/issues\n.\n\n\nIf you are reporting a bug, please include the following:\n\n\n\n\nThe version of PostMaster that you are running\n\n\nThe operating system name and version that is running the application\n\n\nThe version of Python that is running the application (\npython -V\n)\n\n\nThe installation method used (package or manual)\n\n\nDetailed steps to reproduce the bug\n\n\nAny details about your specific environment that might be helpful for troubleshooting\n\n\n\n\nBug Fixes\n\n\nLook through the GitHub issues for bugs.\nAnything tagged with \"bug\" and is unassigned is open to whoever wants to implement it.\nAny changes made should be documented in docs/ChangeLog.md.\n\n\nFeatures\n\n\nLook through the GitHub issues for features.\nAnything tagged with \"feature\" and is unassigned is open to whoever wants to implement it.\nAny changes made should be documented in \"docs/ChangeLog.md\".\n\n\nDocumentation\n\n\nPostMaster documentation is written in Markdown and then deployed to GitHub pages via mkdocs by a StackFocus administrator.\nTo update documentation, directly modify the Markdown files in the \"docs\" folder. Once the changes are merged,\na StackFocus administrator will update GitHub pages.\n\n\nFeedback\n\n\nThe best way to send feedback is to file an issue at \nhttps://github.com/StackFocus/PostMaster/issues\n.\n\n\nIf you are proposing a feature:\n\n\n\n\nExplain in detail how it would work and why it would be beneficial\n\n\nKeep the scope as narrow as possible to make it easier to implement\n\n\n\n\nHow To Contribute Code\n\n\n\n\nFork the project\n\n\nCreate a branch related to the issue (ex. ft-adds_2factor-123)\n\n\nMake changes to the code\n\n\nWrite unit tests to test the new code\n\n\nRun \n$ python pylint-check.py\n to verify that you are complying to PEP8 coding standards\n\n\nRun \n$ py.test tests\n to verify the unit tests pass\n\n\nCommit and push the changed files\n\n\nOpen a pull request and describe what was changed (try to squash your commits when possible)\n\n\n\n\nCoding Standards\n\n\nWe use standard \nPEP8\n.\nOur specific exceptions are in the \n.pylintrc\n file.\n\n\nCode will not be accepted if it fails the pylint test. To run pylint:\n\n$ python pylint-check.py\n\n\nThere is a paradigm we've been using for Flask:\n\n\n\n\nKeep the code in the routes as minimal as possible by using decorators and helper functions\n\n\nUse Ajax to an API route for data as much as possible\n\n\nUse modern Flask and SQLAlchemy functions for API routes (ex. get_or_404)", 
            "title": "Contributing"
        }, 
        {
            "location": "/Development/Contributing/#types-of-contributions", 
            "text": "", 
            "title": "Types of Contributions"
        }, 
        {
            "location": "/Development/Contributing/#bug-reports", 
            "text": "Report bugs and issues at  https://github.com/StackFocus/PostMaster/issues .  If you are reporting a bug, please include the following:   The version of PostMaster that you are running  The operating system name and version that is running the application  The version of Python that is running the application ( python -V )  The installation method used (package or manual)  Detailed steps to reproduce the bug  Any details about your specific environment that might be helpful for troubleshooting", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/Development/Contributing/#bug-fixes", 
            "text": "Look through the GitHub issues for bugs.\nAnything tagged with \"bug\" and is unassigned is open to whoever wants to implement it.\nAny changes made should be documented in docs/ChangeLog.md.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/Development/Contributing/#features", 
            "text": "Look through the GitHub issues for features.\nAnything tagged with \"feature\" and is unassigned is open to whoever wants to implement it.\nAny changes made should be documented in \"docs/ChangeLog.md\".", 
            "title": "Features"
        }, 
        {
            "location": "/Development/Contributing/#documentation", 
            "text": "PostMaster documentation is written in Markdown and then deployed to GitHub pages via mkdocs by a StackFocus administrator.\nTo update documentation, directly modify the Markdown files in the \"docs\" folder. Once the changes are merged,\na StackFocus administrator will update GitHub pages.", 
            "title": "Documentation"
        }, 
        {
            "location": "/Development/Contributing/#feedback", 
            "text": "The best way to send feedback is to file an issue at  https://github.com/StackFocus/PostMaster/issues .  If you are proposing a feature:   Explain in detail how it would work and why it would be beneficial  Keep the scope as narrow as possible to make it easier to implement", 
            "title": "Feedback"
        }, 
        {
            "location": "/Development/Contributing/#how-to-contribute-code", 
            "text": "Fork the project  Create a branch related to the issue (ex. ft-adds_2factor-123)  Make changes to the code  Write unit tests to test the new code  Run  $ python pylint-check.py  to verify that you are complying to PEP8 coding standards  Run  $ py.test tests  to verify the unit tests pass  Commit and push the changed files  Open a pull request and describe what was changed (try to squash your commits when possible)", 
            "title": "How To Contribute Code"
        }, 
        {
            "location": "/Development/Contributing/#coding-standards", 
            "text": "We use standard  PEP8 .\nOur specific exceptions are in the  .pylintrc  file.  Code will not be accepted if it fails the pylint test. To run pylint: $ python pylint-check.py  There is a paradigm we've been using for Flask:   Keep the code in the routes as minimal as possible by using decorators and helper functions  Use Ajax to an API route for data as much as possible  Use modern Flask and SQLAlchemy functions for API routes (ex. get_or_404)", 
            "title": "Coding Standards"
        }, 
        {
            "location": "/ChangeLog/", 
            "text": "v1.1.0 - A Hard Day's Night\n\n\nBACKWARDS INCOMPATIBILITIES / NOTES:\n\n\n\n\nThe 'Log File' config option is now baked into the application config and cannot be set in the API/UI/database. Use \npython manage.py setlogfile \npath\n or edit config.py to change the log file location. [GH-128]\n\n\npython manage.py createdb\n has been replaced with \npython manage.py upgradedb\n [GH-138]\n\n\nOn new installations of PostMaster, the ID of the configuration settings will change. Existing installations that will be upgraded will not be affected. [GH-142]\n\n\nThe API error messages for HTTP 400 and 404 have been made friendlier. Any automation that keys in on these messages will be broken. [GH-142]\n\n\n\n\nFeatures:\n\n\n\n\nAdded the ability to install PostMaster via a deb package [GH-111]\n\n\nAdds the ability to lockout local accounts after x number of failed login attempts [GH-142]\n\n\nDatabase upgrades/migrations are automatic during ugrades via the deb package and Docker [GH-138]\n\n\nAdds the ability to unlock administrators and reset administrator passwords via the CLI [GH-145]\n\n\nAdds the \npython manage.py version\n command [GH-156]\n\n\nAdds the \npython manage.py setkey\n command [GH-161]\n\n\n\n\nImprovements:\n\n\n\n\nDatabase migrations are now tracked via source control to ensure consistency across installations [GH-138]\n\n\nAdded additional documentation [GH-115]\n\n\nImproved Active Directory authentication performance [GH-118]\n\n\nCleaned up JavaScript event listeners [GH-120]\n\n\nMade the \npython manage.py clean\n function completely OS agnostic [GH-158]\n\n\nVagrant now uses Ansible for configuration instead of a bash script [GH-111]\n\n\nUpdated the Python packages to the latest versions [GH-135]\n\n\nApache logs for PostMaster now default to /opt/postmaster/logs [GH-151]\n\n\n\n\nBug Fixes:\n\n\n\n\nFixed an issue where error logs were attempting to be written before the log file path was defined [GH-109]\n\n\nThe configuration file, config.py, is now named as config.default.py in the repository. During installation, the administrator must now copy or rename config.default.py to config.py.\nThis is so that config.py is not overwritten during package upgrades [GH-157].\n\n\n\n\nv1.0.0 - Abbey Road\n\n\nFeatures:\n\n\n\n\nPublished first release of Postmaster", 
            "title": "Change Log"
        }, 
        {
            "location": "/ChangeLog/#v110-a-hard-days-night", 
            "text": "BACKWARDS INCOMPATIBILITIES / NOTES:   The 'Log File' config option is now baked into the application config and cannot be set in the API/UI/database. Use  python manage.py setlogfile  path  or edit config.py to change the log file location. [GH-128]  python manage.py createdb  has been replaced with  python manage.py upgradedb  [GH-138]  On new installations of PostMaster, the ID of the configuration settings will change. Existing installations that will be upgraded will not be affected. [GH-142]  The API error messages for HTTP 400 and 404 have been made friendlier. Any automation that keys in on these messages will be broken. [GH-142]   Features:   Added the ability to install PostMaster via a deb package [GH-111]  Adds the ability to lockout local accounts after x number of failed login attempts [GH-142]  Database upgrades/migrations are automatic during ugrades via the deb package and Docker [GH-138]  Adds the ability to unlock administrators and reset administrator passwords via the CLI [GH-145]  Adds the  python manage.py version  command [GH-156]  Adds the  python manage.py setkey  command [GH-161]   Improvements:   Database migrations are now tracked via source control to ensure consistency across installations [GH-138]  Added additional documentation [GH-115]  Improved Active Directory authentication performance [GH-118]  Cleaned up JavaScript event listeners [GH-120]  Made the  python manage.py clean  function completely OS agnostic [GH-158]  Vagrant now uses Ansible for configuration instead of a bash script [GH-111]  Updated the Python packages to the latest versions [GH-135]  Apache logs for PostMaster now default to /opt/postmaster/logs [GH-151]   Bug Fixes:   Fixed an issue where error logs were attempting to be written before the log file path was defined [GH-109]  The configuration file, config.py, is now named as config.default.py in the repository. During installation, the administrator must now copy or rename config.default.py to config.py.\nThis is so that config.py is not overwritten during package upgrades [GH-157].", 
            "title": "v1.1.0 - A Hard Day's Night"
        }, 
        {
            "location": "/ChangeLog/#v100-abbey-road", 
            "text": "Features:   Published first release of Postmaster", 
            "title": "v1.0.0 - Abbey Road"
        }
    ]
}